<%- include('partials/header') %>

<section class="create-event fade-in">
  <div class="container">
    <div class="page-header" style="text-align: center; margin-bottom: 40px;">
      <h2>Create New Event</h2>
      <p style="color: var(--text-secondary); max-width: 600px; margin: 0 auto;">
        Share your passion and bring people together. Create memorable experiences that matter.
      </p>
    </div>

    <div class="form-container" style="max-width: 800px; margin: 0 auto;">
      <!-- Progress Indicator -->
      <div class="progress-steps" style="display: flex; justify-content: center; margin-bottom: 40px; gap: 16px;">
        <div class="step active" style="display: flex; align-items: center; gap: 8px;">
          <div style="width: 32px; height: 32px; border-radius: 50%; background: var(--accent-color); color: white; display: flex; align-items: center; justify-content: center; font-weight: 600; font-size: 14px;">1</div>
          <span style="color: var(--text-color); font-weight: 500;">Event Details</span>
        </div>
        <div style="width: 40px; height: 2px; background: var(--border-color); margin: 15px 0; border-radius: 1px;"></div>
        <div class="step" style="display: flex; align-items: center; gap: 8px;">
          <div style="width: 32px; height: 32px; border-radius: 50%; background: var(--border-color); color: var(--text-secondary); display: flex; align-items: center; justify-content: center; font-weight: 600; font-size: 14px;">2</div>
          <span style="color: var(--text-secondary); font-weight: 500;">Preview & Publish</span>
        </div>
      </div>

      <form id="event-form" action="/create" method="POST" enctype="multipart/form-data" novalidate>
        <!-- Basic Information Section -->
        <div class="form-section" style="margin-bottom: 32px;">
          <h3 style="margin-bottom: 20px; color: var(--text-color); font-size: 1.25rem; display: flex; align-items: center; gap: 8px;">
            <span style="width: 6px; height: 24px; background: var(--accent-color); border-radius: 3px;"></span>
            Basic Information
          </h3>

          <div class="form-row" style="display: grid; grid-template-columns: 2fr 1fr; gap: 20px; margin-bottom: 20px;">
            <div class="form-group">
              <label for="title">Event Title *</label>
              <input type="text" 
                     id="title" 
                     name="title" 
                     required 
                     maxlength="100"
                     placeholder="Enter a compelling event title">
              <small>Choose a title that captures the essence of your event</small>
              <div class="field-error" style="color: var(--error-color); font-size: 12px; margin-top: 4px; display: none;"></div>
            </div>

            <div class="form-group">
              <label for="capacity">Event Capacity *</label>
              <input type="number" 
                     id="capacity" 
                     name="capacity" 
                     min="1" 
                     max="10000"
                     required 
                     placeholder="50">
              <small>Maximum number of attendees</small>
              <div class="field-error" style="color: var(--error-color); font-size: 12px; margin-top: 4px; display: none;"></div>
            </div>
          </div>

          <div class="form-group">
            <label for="description">Event Description *</label>
            <textarea id="description" 
                      name="description" 
                      required 
                      maxlength="1000"
                      placeholder="Describe your event in detail. What can attendees expect? What makes it special?"
                      style="min-height: 120px;"></textarea>
            <div style="display: flex; justify-content: space-between; align-items: center;">
              <small>Help people understand what your event is about</small>
              <span id="desc-counter" style="color: var(--text-secondary); font-size: 12px;">0/1000</span>
            </div>
            <div class="field-error" style="color: var(--error-color); font-size: 12px; margin-top: 4px; display: none;"></div>
          </div>
        </div>

        <!-- Date & Time Section -->
        <div class="form-section" style="margin-bottom: 32px;">
          <h3 style="margin-bottom: 20px; color: var(--text-color); font-size: 1.25rem; display: flex; align-items: center; gap: 8px;">
            <span style="width: 6px; height: 24px; background: var(--accent-color); border-radius: 3px;"></span>
            When & Where
          </h3>

          <div class="form-row" style="display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px;">
            <div class="form-group">
              <label for="date">Event Date *</label>
              <input type="date" 
                     id="date" 
                     name="date" 
                     required>
              <small>When will your event take place?</small>
              <div class="field-error" style="color: var(--error-color); font-size: 12px; margin-top: 4px; display: none;"></div>
            </div>

            <div class="form-group">
              <label for="time">Event Time *</label>
              <input type="time" 
                     id="time" 
                     name="time" 
                     required>
              <small>Start time for your event</small>
              <div class="field-error" style="color: var(--error-color); font-size: 12px; margin-top: 4px; display: none;"></div>
            </div>
          </div>

          <div class="form-group">
            <label for="location">Event Location *</label>
            <input type="text" 
                   id="location" 
                   name="location" 
                   required 
                   maxlength="200"
                   placeholder="Enter the full address or venue name">
            <small>Where will people need to go? Be specific with address or venue details</small>
            <div class="field-error" style="color: var(--error-color); font-size: 12px; margin-top: 4px; display: none;"></div>
          </div>
        </div>

        <!-- Image Upload Section -->
        <div class="form-section" style="margin-bottom: 32px;">
          <h3 style="margin-bottom: 20px; color: var(--text-color); font-size: 1.25rem; display: flex; align-items: center; gap: 8px;">
            <span style="width: 6px; height: 24px; background: var(--accent-color); border-radius: 3px;"></span>
            Event Image
          </h3>

          <div class="image-upload-container">
            <div class="form-group">
              <label for="image">Upload Event Image</label>
              <div class="file-upload-area" 
                   style="border: 2px dashed var(--border-color); border-radius: var(--radius-sm); padding: 40px; text-align: center; transition: var(--transition); cursor: pointer;"
                   onclick="document.getElementById('image').click()">
                <div id="upload-placeholder">
                  <div style="font-size: 3rem; margin-bottom: 16px; opacity: 0.5;">üì∏</div>
                  <p style="color: var(--text-color); font-weight: 500; margin-bottom: 8px;">Click to upload an image</p>
                  <p style="color: var(--text-secondary); font-size: 14px;">PNG, JPG or GIF up to 5MB</p>
                </div>
                <div id="image-preview" style="display: none;">
                  <img id="preview-img" style="max-width: 300px; max-height: 200px; border-radius: var(--radius-sm); margin-bottom: 12px;">
                  <p style="color: var(--text-color); font-size: 14px;">Click to change image</p>
                </div>
              </div>
              <input type="file" 
                     id="image" 
                     name="image" 
                     accept="image/*"
                     style="display: none;">
              <small>A great image helps attract more attendees to your event</small>
              <div class="field-error" style="color: var(--error-color); font-size: 12px; margin-top: 4px; display: none;"></div>
            </div>
          </div>
        </div>

        <!-- Event Preview -->
        <div class="event-preview" 
             style="background: var(--card-bg); border: 1px solid var(--border-color); border-radius: var(--radius-md); padding: 24px; margin-bottom: 32px; opacity: 0.7;">
          <h3 style="margin-bottom: 16px; color: var(--text-color); font-size: 1.25rem;">Event Preview</h3>
          <div class="preview-card" style="background: var(--bg-secondary); border-radius: var(--radius-sm); padding: 20px; max-width: 400px;">
            <div id="preview-image-container" style="width: 100%; height: 150px; background: var(--border-color); border-radius: var(--radius-sm); margin-bottom: 16px; display: flex; align-items: center; justify-content: center; overflow: hidden;">
              <span style="color: var(--text-secondary); font-size: 14px;">Image Preview</span>
            </div>
            <h4 id="preview-title" style="color: var(--text-color); margin-bottom: 8px; font-size: 1.1rem;">Event Title</h4>
            <p id="preview-datetime" style="color: var(--text-secondary); font-size: 14px; margin-bottom: 4px;">Date & Time</p>
            <p id="preview-location" style="color: var(--text-secondary); font-size: 14px; margin-bottom: 8px;">üìç Location</p>
            <p id="preview-capacity" style="color: var(--accent-color); font-size: 14px; font-weight: 600;">Capacity: --</p>
          </div>
        </div>

        <!-- Form Actions -->
        <div class="form-actions" style="display: flex; gap: 16px; justify-content: center; padding-top: 20px; border-top: 1px solid var(--border-color);">
          <button type="button" class="btn secondary" onclick="resetForm()">Reset Form</button>
          <button type="submit" class="btn" id="submit-btn">
            <span>Create Event</span>
            <div class="btn-spinner" style="display: none; width: 16px; height: 16px; border: 2px solid transparent; border-top: 2px solid currentColor; border-radius: 50%; animation: spin 1s linear infinite; margin-left: 8px;"></div>
          </button>
        </div>
      </form>
    </div>
  </div>
</section>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('event-form');
  const submitBtn = document.getElementById('submit-btn');
  const imageInput = document.getElementById('image');
  const uploadArea = document.querySelector('.file-upload-area');
  
  // Form validation
  const fields = {
    title: document.getElementById('title'),
    description: document.getElementById('description'),
    date: document.getElementById('date'),
    time: document.getElementById('time'),
    location: document.getElementById('location'),
    capacity: document.getElementById('capacity')
  };

  // Set minimum date to today
  const today = new Date().toISOString().split('T')[0];
  fields.date.min = today;

  // Description character counter
  const descCounter = document.getElementById('desc-counter');
  fields.description.addEventListener('input', function() {
    const count = this.value.length;
    descCounter.textContent = `${count}/1000`;
    descCounter.style.color = count > 900 ? 'var(--warning-color)' : 'var(--text-secondary)';
    updatePreview();
  });

  // Real-time preview updates
  Object.keys(fields).forEach(key => {
    fields[key].addEventListener('input', updatePreview);
  });

  function updatePreview() {
    const title = fields.title.value || 'Event Title';
    const date = fields.date.value;
    const time = fields.time.value;
    const location = fields.location.value || 'Location';
    const capacity = fields.capacity.value || '--';

    document.getElementById('preview-title').textContent = title;
    document.getElementById('preview-location').textContent = `üìç ${location}`;
    document.getElementById('preview-capacity').textContent = `Capacity: ${capacity}`;

    if (date && time) {
      const eventDate = new Date(`${date}T${time}`);
      const formattedDate = eventDate.toLocaleDateString('en-US', { 
        weekday: 'short', 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
      const formattedTime = eventDate.toLocaleTimeString('en-US', { 
        hour: 'numeric', 
        minute: '2-digit' 
      });
      document.getElementById('preview-datetime').textContent = `${formattedDate} at ${formattedTime}`;
    } else {
      document.getElementById('preview-datetime').textContent = 'Date & Time';
    }
  }

  // Image upload handling
  imageInput.addEventListener('change', function(e) {
    const file = e.target.files[0];
    if (file) {
      // Validate file size (5MB)
      if (file.size > 5 * 1024 * 1024) {
        showError('image', 'Image size must be less than 5MB');
        return;
      }

      // Validate file type
      if (!file.type.startsWith('image/')) {
        showError('image', 'Please select a valid image file');
        return;
      }

      const reader = new FileReader();
      reader.onload = function(e) {
        const previewImg = document.getElementById('preview-img');
        const placeholder = document.getElementById('upload-placeholder');
        const preview = document.getElementById('image-preview');
        const previewContainer = document.getElementById('preview-image-container');

        previewImg.src = e.target.result;
        placeholder.style.display = 'none';
        preview.style.display = 'block';
        
        // Update preview card
        previewContainer.innerHTML = `<img src="${e.target.result}" style="width: 100%; height: 100%; object-fit: cover; border-radius: var(--radius-sm);">`;
        
        clearError('image');
      };
      reader.readAsDataURL(file);
    }
  });

  // Drag and drop for image upload
  uploadArea.addEventListener('dragover', function(e) {
    e.preventDefault();
    this.style.borderColor = 'var(--accent-color)';
    this.style.backgroundColor = 'var(--accent-light)';
  });

  uploadArea.addEventListener('dragleave', function(e) {
    e.preventDefault();
    this.style.borderColor = 'var(--border-color)';
    this.style.backgroundColor = 'transparent';
  });

  uploadArea.addEventListener('drop', function(e) {
    e.preventDefault();
    this.style.borderColor = 'var(--border-color)';
    this.style.backgroundColor = 'transparent';
    
    const files = e.dataTransfer.files;
    if (files.length > 0) {
      imageInput.files = files;
      imageInput.dispatchEvent(new Event('change'));
    }
  });

  // Form validation
  function validateField(field, rules) {
    const value = field.value.trim();
    let isValid = true;
    let errorMessage = '';

    if (rules.required && !value) {
      isValid = false;
      errorMessage = 'This field is required';
    } else if (rules.minLength && value.length < rules.minLength) {
      isValid = false;
      errorMessage = `Minimum ${rules.minLength} characters required`;
    } else if (rules.maxLength && value.length > rules.maxLength) {
      isValid = false;
      errorMessage = `Maximum ${rules.maxLength} characters allowed`;
    } else if (rules.min && parseInt(value) < rules.min) {
      isValid = false;
      errorMessage = `Minimum value is ${rules.min}`;
    } else if (rules.max && parseInt(value) > rules.max) {
      isValid = false;
      errorMessage = `Maximum value is ${rules.max}`;
    } else if (field.type === 'date' && value) {
      const selectedDate = new Date(value);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      if (selectedDate < today) {
        isValid = false;
        errorMessage = 'Event date cannot be in the past';
      }
    }

    if (isValid) {
      clearError(field.name);
    } else {
      showError(field.name, errorMessage);
    }

    return isValid;
  }

  function showError(fieldName, message) {
    const field = fields[fieldName] || document.getElementById(fieldName);
    const errorDiv = field.parentNode.querySelector('.field-error');
    if (errorDiv) {
      errorDiv.textContent = message;
      errorDiv.style.display = 'block';
    }
    field.style.borderColor = 'var(--error-color)';
  }

  function clearError(fieldName) {
    const field = fields[fieldName] || document.getElementById(fieldName);
    const errorDiv = field.parentNode.querySelector('.field-error');
    if (errorDiv) {
      errorDiv.style.display = 'none';
    }
    field.style.borderColor = 'var(--border-color)';
  }

  // Form submission
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    // Validate all fields
    const validations = {
      title: { required: true, minLength: 3, maxLength: 100 },
      description: { required: true, minLength: 10, maxLength: 1000 },
      date: { required: true },
      time: { required: true },
      location: { required: true, minLength: 3, maxLength: 200 },
      capacity: { required: true, min: 1, max: 10000 }
    };

    let isFormValid = true;
    Object.keys(validations).forEach(fieldName => {
      if (!validateField(fields[fieldName], validations[fieldName])) {
        isFormValid = false;
      }
    });

    if (isFormValid) {
      // Show loading state
      submitBtn.disabled = true;
      submitBtn.querySelector('span').textContent = 'Creating Event...';
      submitBtn.querySelector('.btn-spinner').style.display = 'inline-block';
      
      // Submit the form
      form.submit();
    } else {
      // Scroll to first error
      const firstError = document.querySelector('.field-error[style*="block"]');
      if (firstError) {
        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  });

  // Initialize preview
  updatePreview();
});

function resetForm() {
  if (confirm('Are you sure you want to reset the form? All entered data will be lost.')) {
    document.getElementById('event-form').reset();
    
    // Reset image preview
    document.getElementById('upload-placeholder').style.display = 'block';
    document.getElementById('image-preview').style.display = 'none';
    document.getElementById('preview-image-container').innerHTML = '<span style="color: var(--text-secondary); font-size: 14px;">Image Preview</span>';
    
    // Clear all errors
    document.querySelectorAll('.field-error').forEach(error => {
      error.style.display = 'none';
    });
    
    // Reset field borders
    document.querySelectorAll('input, textarea').forEach(field => {
      field.style.borderColor = 'var(--border-color)';
    });
    
    // Reset character counter
    document.getElementById('desc-counter').textContent = '0/1000';
    
    // Update preview
    setTimeout(() => {
      document.getElementById('preview-title').textContent = 'Event Title';
      document.getElementById('preview-datetime').textContent = 'Date & Time';
      document.getElementById('preview-location').textContent = 'üìç Location';
      document.getElementById('preview-capacity').textContent = 'Capacity: --';
    }, 100);
  }
}
</script>

<%- include('partials/footer') %>